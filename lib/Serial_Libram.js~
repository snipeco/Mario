Serial_Libram={

	devices:[],
	serial:chrome.serial,	
	connectionInfo:{bitrate:19200,stopBits:"one",bufferSize:1024},
	connId:null,
	devicePath:null,
	//this is hte function that will change frequently 
	
	receiveCallBack:function(){console.log('test for callback receive')},

	//init serial
	//add the onReceive lister

	init:function()
	{

	/*	this.serial.onReceive.addListener(function(info)
				{
					//debug
					console.log(info)
			//debug;
				}

				);



				*/
	},


	addReceiveListener:function(callBack){

	me=this;
	this.serial.onReceive.addListener(function(info)
				{
					if(me.receiveCallBack!==undefined)
					me.receiveCallBack(info);
				}

				);


	},

	removeReceiveListener:function(callBack){
	this.serial.onReceive.removeListener(function(info)
				{
					//debug
				//	console.log(info)
					//debug;
					if(callBack!=undefiend)
					callBack();
				}

				);


	},

	getDevices:function()
	{

		var me=this;
		this.serial.getDevices(
				function(devices)
				{
					me.devices=devices;
					mario.fireEvent('getDevicesTerm',document)
				}

				); 


	},


	sendData:function(val){
		var buff = new ArrayBuffer(1);
		var arr = new Uint8Array(buff);
		arr[0] = val;
		//debug
		//console.log("valuesent is : "+val);
		//debug;
		this.serial.send(this.connId,buff,function(info){console.log(info)});
	},

	connect:function(callback){

		if(this.devicePath != null)
			this.serial.connect(this.devicePath,{bitrate:19200,stopBits:"one"},callback);

	},
	update:function(connectionId,callback){

			this.serial.update(connectionId,this.connectionInfo,callback);

	},
}

	function ArrayBufferToString(buffer) {
		return BinaryToString(String.fromCharCode.apply(null, Array.prototype.slice.apply(new Uint8Array(buffer))));
	}

	function StringToArrayBuffer(string) {
		return StringToUint8Array(string).buffer;
	}

	function BinaryToString(binary) {
		var error; 
		try {
			return decodeURIComponent(escape(binary));
		} catch (_error) {
			error = _error;
			if (error instanceof URIError) {
				return binary;
			} else {
				throw error;
			}
		}
	}

